---
import type { Page, GetStaticPaths, MDXInstance } from "astro";

import Layout from "../layouts/Layout.astro";
import Article from "../components/Article.astro";

const title = "Today I learned.";
const description = "Sharing what I learned today";
const tags = ["frontend", "web", "javascript", "html", "css"];

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const allPosts: MDXInstance<MyPost>[] = Object.values(
    import.meta.glob(["./posts/**/*.{md,mdx}", "!./posts/**/_*.{md,mdx}"], {
      eager: true,
    }),
  );

  const sortedPosts = allPosts.sort(
    (a, b) =>
      new Date(b.frontmatter.pubDate).getTime() -
      new Date(a.frontmatter.pubDate).getTime(),
  );

  return paginate(sortedPosts, {
    pageSize: 20,
  });
};

const { page } = Astro.props as { page: Page };
---

<Layout
  title={title}
  description={description}
  pubDate="2024-07-21"
  updatedDate="2024-07-21"
  tags={tags.join(", ")}
>
  <h1>Today I learned.</h1>
  <p>Sharing what I learned today</p>
  <ul>
    {
      page.data.map((post) => (
        <li>
          <Article
            url={post.url}
            title={post.frontmatter.title}
            pubDate={post.frontmatter.pubDate}
            tags={post.frontmatter.tags}
          />
        </li>
      ))
    }
  </ul>

  <nav class="pagination" aria-label="ページネーション">
    <ul>
      {
        page.url.prev && (
          <li>
            <a href={page.url.prev} aria-label="前のページに移動する">
              ≪ 前へ
            </a>
          </li>
        )
      }
      {
        page.url.next && (
          <li>
            <a href={page.url.next} aria-label="次のページに移動する">
              次へ ≫
            </a>
          </li>
        )
      }
    </ul>
  </nav>
</Layout>

<style>
  .pagination ul {
    display: flex;
    justify-content: center;
    gap: 2rem;
    list-style-type: none;
  }
</style>
